# React Intelligence Component Patterns

## ðŸ§© Component Structure Template

### Intelligence Panel Components
```javascript
import React, { useState, useEffect } from 'react';
import { Button } from './ui/button';
import { ScrollArea } from './ui/scroll-area';
import { Badge } from './ui/badge';
import { 
  RefreshCw, 
  Brain, 
  TreePine,
  // ... other Lucide icons
} from 'lucide-react';

function IntelligencePanel({ selectedProject, isOpen, onClose }) {
  // State for data from Claude Code
  const [analysisData, setAnalysisData] = useState(null);
  const [loading, setLoading] = useState(false);
  
  // API calls to backend (which interfaces with Claude Code)
  const loadData = async () => {
    setLoading(true);
    try {
      const response = await fetch(`/api/endpoint`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },
        body: JSON.stringify({ projectRoot: selectedProject.path })
      });
      const data = await response.json();
      setAnalysisData(data);
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Controls */}
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium text-gray-900 dark:text-white flex items-center gap-2">
          <Brain className="w-5 h-5 text-blue-600" />
          Panel Title
        </h3>
        <Button onClick={loadData} disabled={loading}>
          {loading ? <RefreshCw className="w-4 h-4 animate-spin" /> : 'Analyze'}
        </Button>
      </div>

      {/* Content */}
      {analysisData ? (
        <div className="grid gap-4">
          {/* Render data */}
        </div>
      ) : (
        <div className="text-center py-12">
          <Brain className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium mb-2">Ready to Analyze</h3>
          <Button onClick={loadData}>Start Analysis</Button>
        </div>
      )}
    </div>
  );
}
```

## ðŸŽ¨ Consistent UI Patterns

### Tab Navigation
```javascript
const tabs = [
  { id: 'overview', label: 'Overview', icon: BarChart3 },
  { id: 'patterns', label: 'Patterns', icon: Brain },
  { id: 'refactoring', label: 'Refactoring', icon: GitBranch }
];

{tabs.map(({ id, label, icon: Icon }) => (
  <button
    key={id}
    onClick={() => setActiveTab(id)}
    className={`px-4 py-3 text-sm font-medium border-b-2 transition-colors flex items-center gap-2 ${
      activeTab === id
        ? 'border-blue-600 text-blue-600'
        : 'border-transparent text-gray-600 hover:text-gray-900'
    }`}
  >
    <Icon className="w-4 h-4" />
    {label}
  </button>
))}
```

### Status Indicators
```javascript
// Confidence/Status badges
<Badge variant={
  confidence === 'high' ? 'default' :
  confidence === 'medium' ? 'secondary' : 
  'outline'
}>
  {confidence} confidence
</Badge>

// Risk level indicators  
<div className={`p-1 rounded ${
  riskLevel === 'high' ? 'bg-red-100 text-red-600' :
  riskLevel === 'medium' ? 'bg-yellow-100 text-yellow-600' :
  'bg-green-100 text-green-600'
}`}>
  <AlertTriangle className="w-3 h-3" />
</div>
```

### Loading States
```javascript
{loading && (
  <div className="text-center py-12">
    <RefreshCw className="w-16 h-16 text-gray-400 mx-auto mb-4 animate-spin" />
    <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
      Processing...
    </h3>
    <p className="text-sm text-gray-600 dark:text-gray-400">
      Claude Code is analyzing your project
    </p>
  </div>
)}
```

## ðŸ“Š Data Display Patterns

### Metrics Cards
```javascript
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
  <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
    <div className="flex items-center gap-2 mb-2">
      <TreePine className="w-4 h-4 text-blue-600" />
      <span className="text-sm font-medium text-blue-900">Metric Name</span>
    </div>
    <div className="text-2xl font-bold text-blue-900">{value}</div>
  </div>
</div>
```

### Result Lists
```javascript
<div className="space-y-3">
  {results.map((item, index) => (
    <div key={index} className="flex items-start gap-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
      <div className="p-1 bg-blue-100 text-blue-600 rounded">
        <CheckCircle className="w-3 h-3" />
      </div>
      <div className="flex-1">
        <div className="font-medium text-gray-900 dark:text-white">{item.name}</div>
        <div className="text-sm text-gray-600 dark:text-gray-400">{item.description}</div>
      </div>
    </div>
     ))}
 </div>
 ```
