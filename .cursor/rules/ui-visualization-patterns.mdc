# UI Visualization Patterns

## ðŸŽ¨ Color-coded Intelligence

### Risk & Confidence Levels
```javascript
// Risk assessment colors
const getRiskColor = (level) => ({
  high: 'bg-red-100 text-red-600 border-red-200',
  medium: 'bg-yellow-100 text-yellow-600 border-yellow-200', 
  low: 'bg-green-100 text-green-600 border-green-200'
}[level]);

// Confidence indicators
const getConfidenceIcon = (confidence) => 
  confidence === 'high' ? <CheckCircle className="w-3 h-3" /> :
  confidence === 'medium' ? <Clock className="w-3 h-3" /> :
  <AlertTriangle className="w-3 h-3" />;
```

### Technology Stack Badges
```javascript
<div className="flex flex-wrap gap-1">
  {technologies.map((tech, index) => (
    <Badge key={index} variant="outline" className="text-xs">
      {tech}
    </Badge>
  ))}
</div>
```

## ðŸ“Š Data Visualization Patterns

### Metrics Dashboard
```javascript
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
  {[
    { label: 'Files', value: fileCount, color: 'blue', icon: FileText },
    { label: 'Lines', value: linesOfCode, color: 'green', icon: Code },
    { label: 'Dependencies', value: depCount, color: 'purple', icon: Network },
    { label: 'Issues', value: issueCount, color: 'red', icon: AlertTriangle }
  ].map(({ label, value, color, icon: Icon }) => (
    <div key={label} className={`p-4 bg-${color}-50 dark:bg-${color}-900/20 rounded-lg`}>
      <div className="flex items-center gap-2 mb-2">
        <Icon className={`w-4 h-4 text-${color}-600`} />
        <span className={`text-sm font-medium text-${color}-900`}>{label}</span>
      </div>
      <div className={`text-2xl font-bold text-${color}-900`}>{value}</div>
    </div>
  ))}
</div>
```

### Progress & Analysis States
```javascript
// Loading with context
{isAnalyzing && (
  <div className="text-center py-12">
    <RefreshCw className="w-16 h-16 text-blue-600 mx-auto mb-4 animate-spin" />
    <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
      Claude Code Analyzing...
    </h3>
    <p className="text-sm text-gray-600 dark:text-gray-400">
      {analysisStep || 'Processing your codebase'}
    </p>
  </div>
)}

// Empty states with clear actions
{!data && !loading && (
  <div className="text-center py-12">
    <Brain className="w-16 h-16 text-gray-400 mx-auto mb-4" />
    <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
      Ready for Analysis
    </h3>
    <p className="text-sm text-gray-600 dark:text-gray-400 mb-6">
      Let Claude Code analyze your project structure and patterns.
    </p>
    <Button onClick={startAnalysis} className="bg-blue-600 hover:bg-blue-700">
      <Play className="w-4 h-4 mr-2" />
      Start Analysis
    </Button>
  </div>
)}
```

## ðŸ”„ Interactive Elements

### Action Buttons with States
```javascript
<Button
  variant="outline"
  onClick={performAction}
  disabled={isProcessing}
  size="sm"
>
  {isProcessing ? (
    <RefreshCw className="w-4 h-4 animate-spin mr-2" />
  ) : (
    <ActionIcon className="w-4 h-4 mr-2" />
  )}
  {isProcessing ? 'Processing...' : 'Action Label'}
</Button>
```

### Copy Functionality
```javascript
<Button
  variant="outline"
  size="sm"
  onClick={() => {
    navigator.clipboard.writeText(content);
    // Show toast or temporary feedback
  }}
>
  <Copy className="w-4 h-4 mr-2" />
  Copy
</Button>
```

## ðŸ“‹ List & Detail Patterns

### Expandable Results
```javascript
<div className="space-y-3">
  {results.map((item, index) => (
    <div key={index} className="border border-gray-200 dark:border-gray-600 rounded-lg">
      <button
        onClick={() => toggleExpanded(item.id)}
        className="w-full p-4 text-left flex items-center justify-between hover:bg-gray-50"
      >
        <div className="flex items-center gap-3">
          <div className={`p-2 rounded ${getStatusColor(item.status)}`}>
            <ItemIcon className="w-4 h-4" />
          </div>
          <div>
            <div className="font-medium">{item.title}</div>
            <div className="text-sm text-gray-600">{item.summary}</div>
          </div>
        </div>
        <ChevronDown className={`w-4 h-4 transition-transform ${
          expanded[item.id] ? 'rotate-180' : ''
        }`} />
      </button>
      
      {expanded[item.id] && (
        <div className="p-4 border-t border-gray-200 bg-gray-50">
          {/* Detailed content */}
        </div>
      )}
    </div>
  ))}
</div>
```

### File Path Display
```javascript
// Consistent file path styling
<div className="flex items-center gap-2 text-sm">
  <FileText className="w-4 h-4 text-gray-400" />
  <span className="font-mono text-gray-600 dark:text-gray-400">
    {relativePath}
  </span>
 </div>
 ```
